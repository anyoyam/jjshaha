var asyncFun=function(t,n){var r,o=[],n=n||window,e="throw",i=function(t,n){return Object.prototype.toString.call(t).toLowerCase().split(" ")[1].replace("]","")===(n||"function").toLowerCase()},u=function(t,n){r.status="finish",r.retn=t},s=function(t,n){var e=o.shift()||u;return 0==o.length&&(r.status="finish"),e(t,n)},l=function(t){if(i(e))return e.call(n,t);if("log"!=e)throw new Error(t);i(console,"object")&&i(console.error)?console.error(t):alert(t)};return r={retn:null,fn:o,status:"standby",level:function(t){return e=i(t)?t:"log"==t?"log":"throw",this},then:function(t,r){var e=this;return i(t)&&o.push(function(o,i){n=i||r||n,e.retn=o||null,t.call(n,s,l,e.retn)}),e.status="standby",e},fork:function(t,r){var e=this;return i(t,"object")&&o.push(function(o,u){if(!i(o,"object")||void 0==o.flag)throw new Error("need flag to decide which function will be run, when start a FORK method.");if(void 0==t[o.flag]||!i(t[o.flag]))throw new Error('function "'+o.flag+'" not found.');n=u||r||n,e.retn=o||null,t[o.flag].call(n,s,l,e.retn)}),e.status="standby",e},run:function(){if(this.status="running",0==o.length)throw new Error("function queue is empty.");var t=o.shift(),r=[void 0,void 0];if(0==o.length&&(this.status="finish"),arguments.length>0)for(var e=0;e<arguments.length;e++)r.push(arguments[e]);t.apply(n,r)}},i(t)&&r.push(t),r};"undefined"!=typeof module&&(module.exports=asyncFun);